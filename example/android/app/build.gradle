apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
  entryFile: "index.js"
]

if (!project.file("../../node_modules/react-native/react.gradle").exists()) {
  throw new RuntimeException("React modules are not installed. execute: 'yarn install' in 'example' folder. ")
}

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "com.example"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"
    ndk {
      abiFilters "armeabi-v7a", "x86"
    }
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86"
    }
  }
  buildTypes {
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
          versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])

  implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
  implementation "com.facebook.react:react-native:+"  // From node_modules

  implementation project(':react-native-zlib')
}

/** Copy source code from library on each run. Yarn make a copy of files that we should keep in sync during development. */
task syncLibraryFiles(type: Copy) {
  group 'development'
  description 'Synchronize Android files of the root project with Example node_modules dir'
  enabled project.file('../../../android').exists()

  from project.file('../../../android')
  into project.file('../../node_modules/@klarna/react-native-zlib/android')

  exclude 'build'
  exclude '.idea'
  exclude '.gradle'
  exclude '.settings'
}

/** Copy JS code from root of the project on each run. Yarn make a copy of files that we should keep in sync during development. */
task syncJsLibraryFiles(type: Copy, dependsOn: syncLibraryFiles) {
  group 'development'
  description 'Synchronize JS files of the root project with Example node_modules dir'
  enabled project.file('../../../js').exists()

  from project.file('../../../js')
  into project.file('../../node_modules/@klarna/react-native-zlib/js')
}

/** Attach sync tasks to preDebugBuild and preReleaseBuild tasks. */
tasks.whenTaskAdded { task ->
  if (task.name.contains('pre') && task.name.contains('Build') && !task.name.contains('TestBuild')) {
    task.finalizedBy syncJsLibraryFiles
  }
}

/**
 * Run this once to be able to run the application with BUCK
 * puts all compile dependencies into folder libs for BUCK to use
 * */
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
